package com.bridgelabz.stockaccountbuysell.service;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

import com.bridgelabz.stockaccountbuysell.model.Transactions;
import com.bridgelabz.stockaccountbuysell.util.StockUtility;



public class LinkedList<T> {
	static Node head;

	public static class Node<T>
	{
		public T data;
		public Node next;

		public Node(T data2) {
			data = data2;
			next = null;
		}
	}

	/*** Inserting an Elements *****/

/*	public static void insert(T data) {
		Node new_node = new Node(data);
		new_node.next = null;
		if (head == null) {
			head = new_node;
		} else {
			Node temp = head;
			while (temp.next != null) {
				temp = temp.next;
			}
			temp.next = new_node;
		}
	}*/

	/**** Deleting Elements *****/

	public void delete(T data) {
		Node temp = head;
		Node previous = null;

		if (temp != null && temp.data == data) {
			head = temp.next;
		} else {
			while (temp != null && temp.data != data) {
				previous = temp;
				temp = temp.next;
			}
			if (temp == null) {
				return;
			}
			previous.next = temp.next;
		}
	}

	/*****
	 * Search Operation*****/

	public String search(T data) {

		Node temp = head;
		
		boolean flag = false;
		if (temp != null && temp.data == data) {
			head = temp.next;
		} else {
			while (temp != null) {
				if (temp.data == data)
					flag = true;
				temp = temp.next;
			}
		}
		if (flag) {
			System.out.println("\n" + data + " is Present..so Deleting**");
			delete(data);
		} else {
			System.out.println("\n" + data + " is not in the File..So inserting!!");
			insert(data);
		}
		return null;
	}

	
	private void insert(T data) {
		// TODO Auto-generated method stub
		
	}

	/**** Displaying Data *****/

	public void display() {
		if (head == null) {
			System.out.println("List is Empty");
		} else {
			Node temp = head;
			while (temp != null) {
				System.out.print(temp.data + "-->");
				temp = temp.next;
			}
		}
	}
	
	public static Transactions insert(T data) 
	{
		Node new_node = new Node(data);
		new_node.next = null;
		if (head == null) {
			head = new_node;
		} else {
			Node temp = head;
			while (temp.next != null) {
				temp = temp.next;
			}
			temp.next = new_node;
		// TODO Auto-generated method stub
		
	}}
}
