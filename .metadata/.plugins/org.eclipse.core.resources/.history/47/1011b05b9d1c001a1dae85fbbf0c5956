package com.bridgelabz.deckofcards;

import java.util.Arrays;

import com.bridgelabz.utility.Utility;

/**
 * @author :Pramila0526
 * Purpose :Deck Of Cards Using LinkedQueue
 * Date    :05/12/2019
 */

public class DeckOfCardsUsingLinkedQueue {

	 String rank[] = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace" };
	 String cards[] = { "Clubs", "Diamonds", "Hearts", "Spades" };

	 int cardsLength = cards.length;
	 int rankLength = rank.length;
	 int cardsSize = cardsLength * rankLength;
	 String deck[] = new String[cardsSize];
	 int index = 0;
	 String[][] deckIn2D = new String[cardsLength][rankLength];
	 
	// Printing all Cards with its all combinations
	 public void cardsCombinations() {
		for (int i = 0; i < cardsLength; i++) {

			for (int j = 0; j < rankLength; j++) {

				deck[index] = cards[i] + " of " + rank[j];
				index++;
			}
		}
		System.out.println("======All Cards======");
		for (int i = 0; i < cardsSize; i++) {
			System.out.println(" " + deck[i]);
			System.out.println("--------------------|");
		}
		// LinkedQueue.display();
		System.out.println("Total cards are:- " + index);
	 }

	// Code for shuffling the cards

	public void shufflingOfCards() {
		for (int i = 0; i < cardsSize; i++) {
			int shuffle = (int) (Math.random() * cardsSize);
			String temp = deck[shuffle];
			deck[shuffle] = deck[i];
			deck[i] = temp;
		}
		System.out.println("\n===After Shuffling of Cards===\n");
		for (int i = 0; i < cardsSize; i++) {

			System.out.println(" " + deck[i]);
			System.out.println("--------------------|");
		}
	}

	public void distributingOfCards(int numberOfPlayers, int numberOfCards) {
		try {

			for (int i = 0; i < numberOfPlayers; i++)

			{
				System.out.println();
				System.out.println("====Cards of Player" + (i + 1) + "====");
				System.out.println();
				for (int j = 0; j < numberOfCards; j++)

				{
					deckIn2D[i][j]=deck[i+j*numberOfPlayers];

					System.out.println(" " + deckIn2D[i][j]);
					System.out.println("--------------------|");
				}

				System.out.println();
			}

			// LinkedQueue.display1();
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Exception Occurs" + e);
		}
	}

	public void sorting() {
		String[] sortedCards = new String[9];
		char[] a1 = new char[2];
		char[] a2 = new char[2];

		String temp1, temp2, temp3, temp4;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 9; j++) {
				sortedCards[j] = deck[i + j * 4];

			}

			for (int k = 0; k < sortedCards.length - 1; k++) {
				for (int j = 0; j < sortedCards.length - i - 1; j++) {
					temp1 = sortedCards[j];
					temp2 = sortedCards[j + 1];

					a1[0] = temp1.charAt(temp1.length() - 2);
					a1[1] = temp1.charAt(temp1.length() - 1);

					a2[0] = temp2.charAt(temp2.length() - 2);
					a2[1] = temp2.charAt(temp2.length() - 1);

					if (Arrays.compare(a1, a2) > 0) {
						temp3 = sortedCards[j];
						sortedCards[j] = sortedCards[j + 1];
						sortedCards[j + 1] = temp3;

					}

				}
			}
			LinkedQueue.insert("For Player " + (i + 1) + " : \n");
			for (int j = 0; j < 9; j++) {
				temp4 = sortedCards[j];
				//we can also print it with--System.out.print(temp4+"-->");
				LinkedQueue.insert(temp4 + "-->");
			}
			LinkedQueue.insert("\n");
		}
		// printing the Linked Queue of Cards
		LinkedQueue.display();

	}

	public static void main(String[] args) {

		DeckOfCardsUsingLinkedQueue doc = new DeckOfCardsUsingLinkedQueue();

		doc.cardsCombinations();
		doc.shufflingOfCards();

		System.out.println("\nEnter the number of Players");
		int noOfPlayers = Utility.integerInput();

		System.out.println("Enter the number cards for each player");
		int noOfCards = Utility.integerInput();

		doc.distributingOfCards(noOfPlayers, noOfCards);

		doc.sorting();
	}
}